@inject UploadInterface uploadInterface
@using System.Net.Http.Headers

<style>
    .file-input-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #ef953d;
        color: white;
        cursor: pointer;
        position: relative;
        width: 120px;
        border-radius: 5px;
        height: 30px;
        margin: 3px;
        text-decoration: none;
        letter-spacing: 2px;
        text-transform: uppercase;
        font-weight: 600;
    }

        .file-input-zone:hover {
            background-color: #f6a85e;
        }

        .file-input-zone input[type=file] {
            position: absolute;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

</style>
<div class="file-input-zone">
    <InputFile OnChange="@HandleSelected"/>
    Dodaj
</div>
@code{

    [Parameter]
    public string ImgUrl { get; set; }
    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var imageFile in imageFiles)
        {
            if (imageFile != null)
            {
                var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);

                using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
                    ImgUrl = await uploadInterface.UploadImage(content);
                    await OnChange.InvokeAsync(ImgUrl);
                }
            }
        }
    }
}
@page "/internships/all"

@inject InternshipInterface internshipsInterface
@inject CompanyInterface companyInterface
@inject CompanyImageInterface companyImageInterface
 

<div class="filtr mr-4 ml-4 border-card">
    <div class="row">
        <div class="find">
            <div style="color:black; font-size:25px; float:left">Filtrowanie według słów kluczowych:</div>
        </div>
        <div class="add  ml-auto">
            <input class="search mr-auto" @bind="Filter" @bind:event="oninput" placeholder="Wyszukaj" />
        </div>
    </div>
</div>

@if (internships == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Wczytywanie danych...</span>
        </div>
    </div>
}
else
{
    @foreach (var internship in internships.Where(x => IsVisible(x)))
    {
        <div class="card py-4 p-3 border-0 mt-4 ml-4 mr-4 mb-4">
            <div class="card-body">
                <div class="card-title">
                    <div class="title">@internship.Company.name</div>
                </div>
                <div class="card-subtitle">
                    <div class="oi oi-laptop"></div>
                    <span aria-hidden="true">Stanowisko: @internship.worksite</span>
                    <br />
                    <div class="oi oi-clock"></div>
                    <span aria-hidden="true">Godziny pracy: @internship.workTime</span>
                    <br />
                    <div class="oi oi-calendar"></div>
                    <span aria-hidden="true">Praktyki odbywają się w: @internship.month</span>
                    <br />
                    @if (internship.salary == 0)
                    {
                        <div class=" oi oi-dollar"></div>
                        <span aria-hidden="true">Wynagrodzenie: Brak</span>
                    }
                    else
                    {
                        <div class="oi oi-dollar"></div>
                        <span aria-hidden="true">Wynagrodzenie: @internship.salary zł</span>
                    }
                </div>
                <div class="card-text">
                    <div class="title mt-1">
                        Twoje zadania:
                    </div>
                    @internship.tasks
                </div>
                <div class="card-text">
                    <div class="title mt-1">
                        O nas:
                    </div>
                    @internship.description
                </div>
                <div class="form-group">
                        <a href="@($"/email/aplication/{internship.Company.CompanyId}")" class="mt-auto btn float-right m-2">Aplikuj!</a>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public int? companyId { get; set; }

    private int? DeleteKeeperId { get; set; } = null;

    private bool Started { get; set; } = false;

    public string Filter { get; set; }

    public IEnumerable<InternshipDTO> internships = new List<InternshipDTO>();

    public IEnumerable<CompanyDTO> company = new List<CompanyDTO>();


    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }

    public bool IsVisible(InternshipDTO internship)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (internship.Company.name.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (internship.worksite.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (internship.month.ToString().StartsWith(Filter))
            return true;

        if (internship.workTime.ToString().StartsWith(Filter))
            return true;

        return false;
    }

    private async Task LoadData()
    {
        internships = await internshipsInterface.GetInternships();
        company = await companyInterface.GetCompanies();
    }
}

@page "/email/keeper/{id:int}"

@inject EmailInterface emailInterface
@inject KeeperInterface keeperInterface
@inject IJSRuntime Runtime
@using Utils

<div class="email p-5 mt-md-5">
    <h2>Wiadomość do opiekuna praktyk</h2>
    <EditForm Model="EmailData" OnValidSubmit="SendEmail">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-sm pb-1">
                <div class="form-group">
                    <InputText @bind-Value="EmailData.to" hidden />
                </div>
                <div class="form-group">
                    <label class="d-block">Tytuł:</label>
                    <br/>
                    <InputText @bind-Value="EmailData.subject" />
                </div>
                <div class="form-group">
                    <label class="d-block">Treść:</label>
                    <InputTextArea rows="4" style="min-width:100%" placeholder="W celu dalszego kontaktu proszę podać dane " @bind-Value="EmailData.text" />
                </div>
            </div>
        </div>
        <label class="buttons">
            <button class="btn btn-submit btn-primary">Wyślij</button>
            <a class="btn btn-danger" href=@($"/keeper/details/{id}")>Wyjdź</a>
        </label>
    </EditForm>
</div>


@code {
    [Parameter]
    public int? id { get; set; }

    public Email EmailData { get; set; } = new Email();

    public KeeperDTO keeper { get; set; } = new KeeperDTO();

    protected async override Task OnInitializedAsync()
    {
        keeper = await keeperInterface.GetKeeper(id.Value);

        if (keeper != null)
        {
            EmailData.to = keeper.email;
        }

    }
    private void SendEmail()
    {
        Runtime.InvokeVoidAsync("ToastShow", "success", "Email wysłany pomyślnie.");
        emailInterface.Send(EmailData);
    }
}

@page "/email/aplication/{id:int}"

@inject EmailInterface emailInterface
@inject CompanyInterface companyInterface
@inject IJSRuntime Runtime
@using Utils

<div class="email p-5 mt-md-5">
    <h2>Wiadomość do firmy:</h2>
    <EditForm Model="EmailData" OnValidSubmit="SendEmail">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-sm pb-1">
                <div class="form-group">
                    <InputText @bind-Value="EmailData.to" hidden />
                </div>
                <div class="form-group">
                    <label class="d-block">Tytuł:</label>
                    <br/>
                    <InputText @bind-Value="EmailData.subject" />
                </div>
                <div class="form-group">
                    <label class="d-block">Treść:</label>
                    <InputTextArea rows="4" style="min-width:100%" placeholder="W celu dalszej rekrutacji proszę podać dane kontaktowe... Aplikuje na stanowisko..." @bind-Value="EmailData.text" />
                </div>
            </div>
        </div>
        <label class="buttons">
            <button class="btn btn-submit btn-primary">Wyślij</button>
            <a class="btn btn-danger" href=@($"/internships/all")>Wyjdź</a>
        </label>
    </EditForm>
</div>


@code {
    [Parameter]
    public int? id { get; set; }

    public Email EmailData { get; set; } = new Email();

    public string stanowisko { get; set; }

    public CompanyDTO company { get; set; } = new CompanyDTO();

    protected async override Task OnInitializedAsync()
    {
        company = await companyInterface.GetCompany(id.Value);

        if (company != null)
        {
            EmailData.to = company.email;
        }
    }

    private void SendEmail()
    {
        Runtime.InvokeVoidAsync("ToastShow", "success", "Email wysłany pomyślnie.");
        emailInterface.Send(EmailData);
    }
}

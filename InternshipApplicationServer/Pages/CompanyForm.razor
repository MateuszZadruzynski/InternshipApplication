@page "/companies/create"
@page "/companies/edit/{CompanyId:int}"

@using Administration.Interface;
@using Models
@using Microsoft.AspNetCore.Identity
@using Utils
@using DataAcess.Data

@inject CompanyImageInterface ImageInterface
@inject CompanyInterface CompanyInterface
@inject NavigationManager Navigation
@inject IJSRuntime Runtime
@inject UserManager<User> userManager
@inject RoleManager<IdentityRole> _RoleManager

<div class="div-form">
    <h2>@Title firmę:</h2>

    <EditForm Model="CompanyData" OnValidSubmit="AddNewEditCompany">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col">
                <div class="form-group">
                    <label class="d-block">Nazwa firmy:</label>
                    <InputText placeholder="Name" @bind-Value="CompanyData.name" />
                    <ValidationMessage For="()=>CompanyData.name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label class="d-block">NIP:</label>
                    <InputText placeholder="1111111111" @bind-Value="CompanyData.nip" />
                    <ValidationMessage For="()=>CompanyData.nip"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label class="d-block">Rodzaj:</label>
                    <InputSelect @bind-Value="CompanyData.type">
                        <ValidationMessage For="()=>CompanyData.type"></ValidationMessage>
                        <option>rodzaje..</option>
                        <option value="Inforamtyka">Informatka</option>
                        <option value="Chemia">Chemia</option>
                        <option value="Budownictwo">Budownictwo</option>
                        <option value="Elektronika">Elektronika</option>
                        <option value="Architektura">Architektura</option>
                        <option value="Administracja">Administracja</option>
                        <option value="Warsztat">Warsztat</option>
                        <option value="Szkoła">Szkoła</option>
                        <option value="Uczelnia">Uczelnia</option>
                        <option value="Kosmetologia">Kosmetologia</option>
                        <option value="Turystyka">Turystyka</option>
                        <option value="Gastronomia">Gastronomia</option>
                        <option value="Medycyna">Medycyna</option>
                        <option value="Prawo">Prawo</option>
                        <option value="Zarządzanie">Zarządzanie</option>
                    </InputSelect>
                </div>
                @if (Title == "Tworzenie")
                {
                    <div class="form-group">
                        <label class="d-block">E-mail:</label>
                        <InputText placeholder="E-mail" @bind-Value="CompanyData.email" />
                        <ValidationMessage For="()=>CompanyData.email"></ValidationMessage>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <InputText placeholder="E-mail" hidden @bind-Value="CompanyData.email" />
                        <ValidationMessage For="()=>CompanyData.email"></ValidationMessage>
                    </div>
                }
                <div class="form-group">
                    <label class="d-block">Hasło:</label>
                    <InputText type="password" placeholder="2s@sd!90z" @bind-Value="CompanyData.Password" />
                    <ValidationMessage For="()=>CompanyData.Password"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label class="d-block">Potwierdź hasło:</label>
                    <InputText type="password" placeholder="2s@sd!90z" @bind-Value="CompanyData.ConfirmPassword" />
                    <ValidationMessage For="()=>CompanyData.ConfirmPassword"></ValidationMessage>
                </div>
            </div>
            <div class="col">
                <div class="form-group">
                    <label class="d-block">Ulica:</label>
                    <InputText placeholder="Ul.Pocieszna" @bind-Value="CompanyData.street" />
                    <ValidationMessage For="()=>CompanyData.street"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label class="d-block">Numer ulicy:</label>
                    <InputText placeholder="12" @bind-Value="CompanyData.streetNumber" />
                    <ValidationMessage For="()=>CompanyData.streetNumber"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label class="d-block">Miasto:</label>
                    <InputText placeholder="Bydgoszcz" @bind-Value="CompanyData.city" />
                    <ValidationMessage For="()=>CompanyData.city"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label class="d-block">Kod pocztowy:</label>
                    <InputText placeholder="85-024" @bind-Value="CompanyData.postCode" />
                    <ValidationMessage For="()=>CompanyData.postCode"></ValidationMessage>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="d-block">Opis:</label>
            <InputTextArea placeholder="Here you can describe your company" rows="4" style="min-width:100%" @bind-Value="CompanyData.description" />
        </div>
        <label class="buttons">
            <button class="btn-submit">@Title Firmy</button>
            <NavLink href="/companies" class="btn btn-dark">Wyjdź</NavLink>
        </label>
    </EditForm>
</div>

@code {
    [Parameter]
    public int? CompanyId { get; set; }

    private CompanyDTO CompanyData { get; set; } = new CompanyDTO();

    private string Title { get; set; } = "Tworzenie";


    private List<string> DeleteImagesNames { get; set; } = new List<string>();

    [CascadingParameter]
    public Task<AuthenticationState> Authentication { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await Authentication;
        if (!state.User.IsInRole(Utils.AuthenticationData.AdminRole))
        {
            var uri = new Uri(Navigation.Uri);
            Navigation.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }

        if (CompanyId == null)
        {
            CompanyData = new CompanyDTO();
        }
        else
        {
            Title = "Edytowanie";
            CompanyData = await CompanyInterface.GetCompany(CompanyId.Value);
        }
    }

    private async Task AddNewEditCompany()
    {
        try
        {
            var companyByNip = await CompanyInterface.IsNipUnique(CompanyData.nip, CompanyData.CompanyId);
            if (companyByNip != null)
            {
                await Runtime.InvokeVoidAsync("ToastShow", "error", "Nip already exists in database.");
                return;
            }
            if (CompanyData.CompanyId != 0 && Title == "Edytowanie")
            {
                var updateData = await CompanyInterface.UpdateCompany(CompanyData.CompanyId, CompanyData);
                var user = await userManager.FindByEmailAsync(CompanyData.email);

                if (user == null)
                {
                    await Runtime.InvokeVoidAsync("ToastShow", "error", "Użytkownik nie istnieje.");
                }
                var tokenPassword = await userManager.GeneratePasswordResetTokenAsync(user);
                var resultPassword = await userManager.ResetPasswordAsync(user, tokenPassword, CompanyData.Password);

                if (resultPassword == null)
                {
                    await Runtime.InvokeVoidAsync("ToastShow", "error", "Błędne hasło.");
                }
                await Runtime.InvokeVoidAsync("ToastShow", "success", "Company updated.");
            }
            else
            {
                var company = new User()
                { 
                    UserName = CompanyData.email,
                    Email = CompanyData.email,
                    Name = CompanyData.name,
                    EmailConfirmed = true
                };

                var result = await userManager.CreateAsync(company, CompanyData.Password);
                var roleResult = await userManager.AddToRoleAsync(company, AuthenticationData.CompanyRole);

                if (!result.Succeeded || !roleResult.Succeeded || !roleResult.Succeeded && !result.Succeeded)
                {
                    await Runtime.InvokeVoidAsync("ToastShow", "error", "Błąd przy tworzeniu hasła.");
                }
                var createData = await CompanyInterface.CreateCompany(CompanyData);
                await Runtime.InvokeVoidAsync("ToastShow", "success", "Company created.");
            }
        }
        catch (Exception error)
        {
            await Runtime.InvokeVoidAsync("ToastShow", "error", error.Message);
        }
        Navigation.NavigateTo("/companies");
    }

}

@page "/keepers"

@using Administration.Interface;
@using Models
@using DataAcess.Data
@using Microsoft.AspNetCore.Identity
@using Utils
@inject KeeperInterface KeeperInterface
@attribute [Authorize(Roles = Utils.AuthenticationData.AdminRole)]
@inject IJSRuntime JsRun
@inject NavigationManager NavMenager
@inject UserManager<User> userManager
@inject RoleManager<IdentityRole> _RoleManager

<div class="filtr">
    <div class="row">
        <div class="find">
            <input class="search" @bind="Filter" @bind:event="oninput" placeholder="Wyszuukaj..." />
        </div>
        <div class="add  ml-auto">
            <NavLink class="btn btn-secondary p-sm-2" href="/keepers/create">
                <span class="oi oi-plus"></span> Dodaj
            </NavLink>
        </div>
    </div>
</div>
@if (keeperData.Any())
{
    @foreach (var eachKeeper in keeperData.Where(x => IsVisible(x)))
    {
        <br />
        <div class="data table-responsive">
            <table class="table table-dark">
                <thead>
                    <tr>
                        <th>Stopień naukowy</th>
                        <th>Imię</th>
                        <th>Nazwisko</th>
                        <th>Nr. Telefonu</th>
                        <th>E-mail</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @eachKeeper.degree
                        </td>
                        <td>
                            @eachKeeper.name
                        </td>
                        <td>
                            @eachKeeper.lastName
                        </td>
                        <td>
                            @eachKeeper.telephone
                        </td>
                        <td>
                            @eachKeeper.email
                        </td>
                    </tr>
                </tbody>
            </table>
            <div class="desc bg-dark">
                <NavLink href="@($"/keepers/edit/{eachKeeper.KeeperId}")" class="btn btn-success">Edytuj</NavLink>
                <NavLink class="btn btn-danger" @onclick="() => DeleteKeeper(eachKeeper.KeeperId, eachKeeper.email)">Usuń</NavLink>
            </div>
        </div>
    }
}
else
{
    <NoDataFound></NoDataFound>
}

<DeleteWindow isParentTrue="Started" ConfirmChaged="ConfirmDelete"></DeleteWindow>

@code{

    private IEnumerable<KeeperDTO> keeperData { get; set; } = new List<KeeperDTO>();
    private int? DeleteKeeperId { get; set; } = null;
    private string? DeleteKeeperEmail { set; get; } = null;
    private bool Started { get; set; } = false;
    public string Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        keeperData = await KeeperInterface.GetAllKeepers();
    }

    private async Task DeleteKeeper(int KeeperId, string email)
    {
        DeleteKeeperId = KeeperId;
        DeleteKeeperEmail = email;
        await JsRun.InvokeVoidAsync("ShowDialog");
    }

    public bool IsVisible(KeeperDTO eachKeeper)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (eachKeeper.name.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (eachKeeper.lastName.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (eachKeeper.telephone.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (eachKeeper.email.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    public async Task ConfirmDelete(bool isTrue)
    {
        Started = true;
        if (isTrue && DeleteKeeperId != null)
        {
            KeeperDTO keeper = await KeeperInterface.GetKeeper(DeleteKeeperId.Value);

            var user = await userManager.FindByEmailAsync(DeleteKeeperEmail);

            if (user == null)
            {
                await JsRun.InvokeVoidAsync("ToastShow", "error", "Użytkownik nie istnieje.");
            }

            var result = await userManager.DeleteAsync(user);

            if (result != null)
            {
                await KeeperInterface.DeleteKeeper(DeleteKeeperId.Value);
                await JsRun.InvokeVoidAsync("ToastShow", "success", "Użytkownik został usunięty.");
            }
            keeperData = await KeeperInterface.GetAllKeepers();
        }
        await JsRun.InvokeVoidAsync("HideDialog");
        Started = false;
    }

}

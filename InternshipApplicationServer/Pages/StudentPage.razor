@page "/students"

@using Administration.Interface;
@using Models
@using DataAcess.Data
@using Microsoft.AspNetCore.Identity
@using Utils
@inject StudentInterface StudentInterface
@attribute [Authorize(Roles = Utils.AuthenticationData.AdminRole)]
@inject IJSRuntime JsRuntime
@inject NavigationManager NavMenager
@inject UserManager<User> userManager
@inject RoleManager<IdentityRole> _RoleManager

<div class="filtr">
    <div class="row">
        <div class="find">
            <input class="search" @bind="Filter" @bind:event="oninput" placeholder="Wyszukaj..." />
        </div>
        <div class="add ml-auto">
            <NavLink class="btn btn-secondary" href="/students/create">
                <span class="oi oi-plus"></span> Dodaj
            </NavLink>
        </div>
    </div>
</div>
@if (StudentData.Any())
{
    @foreach (var eachStudent in StudentData.Where(x => IsVisible(x)))
    {
        <br />
        <div class="data table-responsive">
            <table class="table table-dark">
                <thead>
                    <tr>
                        <th>Imię</th>
                        <th>Nazwisko</th>
                        <th>Nr. Telefonu</th>
                        <th>Indeks</th>
                        <th>E-mail</th>
                        <th>Kierunek studiów</th>
                        <th>Ulica</th>
                        <th>Miasto</th>
                        <th>Kod pocztowy</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @eachStudent.name
                        </td>
                        <td>
                            @eachStudent.lastName
                        </td>
                        <td>
                            @eachStudent.telephone
                        </td>
                        <td>
                            @eachStudent.index
                        </td>
                        <td>
                            @eachStudent.email
                        </td>
                        <td>
                            @eachStudent.major
                        </td>
                        <td>
                            @eachStudent.street @eachStudent.streetNumber
                        </td>
                        <td>
                            @eachStudent.city
                        </td>
                        <td>
                            @eachStudent.postCode
                        </td>
                    </tr>
                </tbody>
            </table>
            <div class="desc bg-dark">
                <NavLink href="@($"/students/edit/{eachStudent.StudentId}")" class="btn btn-success">Edytuj</NavLink>
                <NavLink class="btn btn-danger" @onclick="() => DeleteStudent(eachStudent.StudentId, eachStudent.email)">Usuń</NavLink>
            </div>
        </div>
    }
}
else
{
    <NoDataFound></NoDataFound>
}

<DeleteWindow isParentTrue="Started" ConfirmChaged="ConfirmDelete"></DeleteWindow>

@code{

    private IEnumerable<StudentDTO> StudentData { get; set; } = new List<StudentDTO>();
    private int? DeleteStudentId { get; set; } = null;
    private bool Started { get; set; } = false;
    private string? DeleteStudentEmail { set; get; } = null;
    public string Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        StudentData = await StudentInterface.GetAllStudents();
    }

    public bool IsVisible(StudentDTO eachStudent)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (eachStudent.name.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (eachStudent.lastName.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (eachStudent.telephone.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (eachStudent.email.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteStudent(int StudentId, string email)
    {
        DeleteStudentId = StudentId;
        DeleteStudentEmail = email;
        await JsRuntime.InvokeVoidAsync("ShowDialog");
    }


    public async Task ConfirmDelete(bool isTrue)
    {
        Started = true;
        if (isTrue && DeleteStudentId != null)
        {
            StudentDTO Student = await StudentInterface.GetStudent(DeleteStudentId.Value);
            var user = await userManager.FindByEmailAsync(DeleteStudentEmail);

            if (user == null)
            {
                await JsRuntime.InvokeVoidAsync("ToastShow", "error", "Użytkownik nie istnieje.");
            }

            var result = await userManager.DeleteAsync(user);

            if (result != null)
            {
                await StudentInterface.DeleteStudent(DeleteStudentId.Value);
                await JsRuntime.InvokeVoidAsync("ToastShow", "success", "Użytkownik został usunięty.");
            }
            StudentData = await StudentInterface.GetAllStudents();
        }
        await JsRuntime.InvokeVoidAsync("HideDialog");
        Started = false;
    }
}
